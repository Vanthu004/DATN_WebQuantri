// Test c·∫•u h√¨nh email
require('dotenv').config();
const nodemailer = require('nodemailer');

const testEmailConfig = async () => {
  console.log('üîß Testing email configuration...\n');
  
  // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
  console.log('üìã Environment variables:');
  console.log(`   EMAIL_USERNAME: ${process.env.EMAIL_USERNAME ? '‚úÖ Set' : '‚ùå Not set'}`);
  console.log(`   EMAIL_PASSWORD: ${process.env.EMAIL_PASSWORD ? '‚úÖ Set' : '‚ùå Not set'}`);
  
  if (!process.env.EMAIL_USERNAME || !process.env.EMAIL_PASSWORD) {
    console.error('\n‚ùå Missing email configuration in .env file');
    console.log('Please add:');
    console.log('EMAIL_USERNAME=your-email@gmail.com');
    console.log('EMAIL_PASSWORD=your-16-character-app-password');
    return;
  }
  
  console.log('\nüìß Testing email connection...');
  
  try {
    // T·∫°o transporter
    const transporter = nodemailer.createTransporter({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USERNAME,
        pass: process.env.EMAIL_PASSWORD,
      },
    });
    
    // Test k·∫øt n·ªëi
    console.log('üîó Testing connection...');
    await transporter.verify();
    console.log('‚úÖ Email connection successful!');
    
    // Test g·ª≠i email
    console.log('\nüì§ Testing email sending...');
    const testEmail = process.env.EMAIL_USERNAME; // G·ª≠i cho ch√≠nh m√¨nh
    
    const mailOptions = {
      from: `"Swear Server Test" <${process.env.EMAIL_USERNAME}>`,
      to: testEmail,
      subject: "Test Email - Swear Server",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">Test Email Configuration</h2>
          <p>Xin ch√†o,</p>
          <p>Email n√†y ƒë∆∞·ª£c g·ª≠i ƒë·ªÉ test c·∫•u h√¨nh email c·ªßa Swear Server.</p>
          <div style="background-color: #f4f4f4; padding: 20px; text-align: center; margin: 20px 0;">
            <h3 style="color: #28a745; margin: 0;">‚úÖ C·∫•u h√¨nh email th√†nh c√¥ng!</h3>
          </div>
          <p><strong>Th·ªùi gian:</strong> ${new Date().toLocaleString('vi-VN')}</p>
          <p>N·∫øu b·∫°n nh·∫≠n ƒë∆∞·ª£c email n√†y, c√≥ nghƒ©a l√† c·∫•u h√¨nh email ƒë√£ ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.</p>
          <p>Tr√¢n tr·ªçng,<br>Swear Server</p>
        </div>
      `,
    };
    
    const info = await transporter.sendMail(mailOptions);
    console.log('‚úÖ Email sent successfully!');
    console.log(`   Message ID: ${info.messageId}`);
    console.log(`   Sent to: ${testEmail}`);
    
    console.log('\nüéâ Email configuration is working perfectly!');
    console.log('You can now use email features in your application.');
    
  } catch (error) {
    console.error('\n‚ùå Email test failed:');
    console.error(`   Error: ${error.message}`);
    
    // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ
    if (error.code === 'EAUTH') {
      console.error('\nüîê Authentication Error - Please check:');
      console.error('   1. EMAIL_USERNAME is correct');
      console.error('   2. EMAIL_PASSWORD is App Password (not regular password)');
      console.error('   3. 2FA is enabled on your Gmail account');
      console.error('   4. App Password is generated correctly');
    } else if (error.code === 'ECONNECTION') {
      console.error('\nüåê Connection Error - Please check:');
      console.error('   1. Internet connection');
      console.error('   2. Firewall settings');
      console.error('   3. Gmail server status');
    } else if (error.code === 'EENVELOPE') {
      console.error('\nüìß Envelope Error - Please check:');
      console.error('   1. Email address format');
      console.error('   2. From/To email addresses');
    } else {
      console.error('\nüìß Other Error - Please check:');
      console.error('   1. Nodemailer version');
      console.error('   2. Node.js version');
      console.error('   3. Network configuration');
    }
    
    console.log('\nüìñ For detailed instructions, see EMAIL_SETUP_GUIDE.md');
  }
};

// Ch·∫°y test
testEmailConfig().catch(console.error); 