import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import User from "../../interfaces/user";
import { toast } from "react-toastify";
import "../../css/users/listUser.css";
import api from "../../configs/api";
import { blockUser } from "../../services/user";



const ListUser = () => {
  const navigate = useNavigate();
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(false);
  const [actionLoading, setActionLoading] = useState<string | null>(null);
  const [showModal, setShowModal] = useState<string | null>(null);
  const [banReason, setBanReason] = useState("");
  const [banDuration, setBanDuration] = useState<string>("");

  const fetchUsers = async () => {
    setLoading(true);
    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token ƒëƒÉng nh·∫≠p");
      const res = await api.get("/users", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setUsers(res.data as User[]);
    } catch (err) {
      if (err instanceof Error) {
        toast.error(err.message || "L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng");
      } else {
        toast.error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng");
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  const handleBlock = async (id: string) => {
    setShowModal(id);
  };

  const confirmBlock = async (id: string) => {
    setActionLoading(id);
    try {
      const token = localStorage.getItem("token") || "";
      if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token ƒëƒÉng nh·∫≠p");

      
      const banData = {
        isBanned: true,
        bannedUntil: banDuration ? new Date(banDuration).toISOString() : null,
        reason: banReason || "",
      };

      await blockUser(id, banData, token);
      toast.success("ƒê√£ ch·∫∑n ng∆∞·ªùi d√πng");
      await fetchUsers();
      setShowModal(null);
      setBanReason("");
      setBanDuration("");
    } catch (err) {
      if (err instanceof Error) {
        toast.error(err.message || "Thao t√°c th·∫•t b·∫°i");
      } else {
        toast.error("Thao t√°c th·∫•t b·∫°i");
      }
    } finally {
      setActionLoading(null);
    }
  };

  const handleUnblock = async (id: string) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën m·ªü ch·∫∑n ng∆∞·ªùi d√πng n√†y?")) return;

    setActionLoading(id);
    try {
      const token = localStorage.getItem("token") || "";
      if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token ƒëƒÉng nh·∫≠p");

      const banData = {
        isBanned: false,
        bannedUntil: null,
        reason: "",
      };

      await blockUser(id, banData, token);
      toast.success("ƒê√£ m·ªü ch·∫∑n ng∆∞·ªùi d√πng");
      await fetchUsers();
    } catch (err) {
      if (err instanceof Error) {
        toast.error(err.message || "Thao t√°c th·∫•t b·∫°i");
      } else {
        toast.error("Thao t√°c th·∫•t b·∫°i");
      }
    } finally {
      setActionLoading(null);
    }
  };

  return (
    <div className="user-list-container">
      <div className="user-list-header">
        <h2 className="user-list-title">Danh s√°ch ng∆∞·ªùi d√πng</h2>
        <div className="user-list-actions">
          <button 
            className="user-action-btn manage-roles"
            onClick={() => navigate('/users/manage')}
          >
            üëë Qu·∫£n l√Ω quy·ªÅn
          </button>
        </div>
      </div>
      
      {/* Th·ªëng k√™ nhanh */}
      <div className="user-stats">
        <div className="stat-item">
          <span className="stat-number">{users.length}</span>
          <span className="stat-label">T·ªïng ng∆∞·ªùi d√πng</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">{users.filter(u => u.role === 'admin').length}</span>
          <span className="stat-label">Admin</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">{users.filter(u => u.role === 'customer').length}</span>
          <span className="stat-label">Kh√°ch h√†ng</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">{users.filter(u => u.ban?.isBanned).length}</span>
          <span className="stat-label">B·ªã kh√≥a</span>
        </div>
      </div>
      
      <div className="user-list-table-wrap">
        <table className="user-list-table">
          <thead>
            <tr>
              <th>#</th>
              <th>Email</th>
              <th>T√™n</th>
              <th>Vai tr√≤</th>
              <th>S·ªë ƒëi·ªán tho·∫°i</th>
              <th>Tr·∫°ng th√°i</th>
              <th>Th·ªùi h·∫°n ch·∫∑n</th>
              <th>L√Ω do</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {users.map((user, idx) => (
              <tr key={user._id} className="user-row">
                <td>{idx + 1}</td>
                <td>{user.email}</td>
                <td>{user.name}</td>
                <td>{user.role}</td>
                <td>{user.phone_number || "-"}</td>
                <td>
                  {user.ban.isBanned ? (
                    <span className="user-badge blocked">ƒê√£ ch·∫∑n</span>
                  ) : (
                    <span className="user-badge active">Ho·∫°t ƒë·ªông</span>
                  )}
                </td>
                <td>
                  {user.ban.bannedUntil
                    ? new Date(user.ban.bannedUntil).toLocaleString()
                    : "-"}
                </td>

                <td>{user.ban.reason || "-"}</td>
                <td>
                  {user.ban.isBanned ? (
                    <button
                      className="user-action-btn unblock"
                      onClick={() => handleUnblock(user._id)}
                      disabled={actionLoading === user._id}
                    >
                      {actionLoading === user._id ? "ƒêang x·ª≠ l√Ω..." : "M·ªü ch·∫∑n"}
                    </button>
                  ) : (
                    <button
                      className="user-action-btn block"
                      onClick={() => handleBlock(user._id)}
                      disabled={actionLoading === user._id}
                    >
                      {actionLoading === user._id ? "ƒêang x·ª≠ l√Ω..." : "Ch·∫∑n"}
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        {loading && <div className="user-list-loading">ƒêang t·∫£i...</div>}
      </div>

      {/* Modal ƒë·ªÉ nh·∫≠p l√Ω do v√† th·ªùi h·∫°n ban */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h3 className="text-lg font-semibold mb-4">Ch·∫∑n ng∆∞·ªùi d√πng</h3>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                L√Ω do ch·∫∑n
              </label>
              <textarea
                className="mt-1 w-full p-2 border rounded"
                value={banReason}
                onChange={(e) => setBanReason(e.target.value)}
                placeholder="Nh·∫≠p l√Ω do ch·∫∑n (kh√¥ng b·∫Øt bu·ªôc)"
              />
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                Th·ªùi h·∫°n ch·∫∑n (kh√¥ng b·∫Øt bu·ªôc)
              </label>
              <input
                type="datetime-local"
                className="mt-1 w-full p-2 border rounded"
                value={banDuration}
                onChange={(e) => setBanDuration(e.target.value)}
              />
            </div>
            <div className="flex justify-end gap-2">
              <button
                className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
                onClick={() => {
                  setShowModal(null);
                  setBanReason("");
                  setBanDuration("");
                }}
              >
                H·ªßy
              </button>
              <button
                className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
                onClick={() => confirmBlock(showModal)}
                disabled={actionLoading === showModal}
              >
                {actionLoading === showModal ? "ƒêang x·ª≠ l√Ω..." : "X√°c nh·∫≠n"}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ListUser;
