import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import {
  getAllVouchers,
  deleteVoucherByVoucherId,
} from "../../services/voucher";
import { VoucherData } from "../../services/voucher";
import "../../css/vouchers/listVoucher.css";

const ListVoucher = () => {
  const navigate = useNavigate();
  const [vouchers, setVouchers] = useState<VoucherData[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchVouchers();
  }, []);

  const fetchVouchers = async () => {
    setLoading(true);
    try {
      const data = await getAllVouchers();
      if (Array.isArray(data)) {
        // Nh√≥m theo voucher_id v√† ch·ªâ l·∫•y m·ªôt voucher ƒë·∫°i di·ªán
        const uniqueMap = new Map<string, VoucherData>();
        data.forEach((voucher) => {
          // N·∫øu voucher_id t·ªìn t·∫°i, ∆∞u ti√™n l·∫•y voucher_id l√†m key
          const key = voucher.voucher_id || voucher._id!;
          if (!uniqueMap.has(key)) {
            uniqueMap.set(key, voucher);
          }
        });
        setVouchers(Array.from(uniqueMap.values()));
      } else {
        setVouchers([]);
      }
    } catch (error) {
      console.error("L·ªói khi t·∫£i voucher:", error);
      toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch voucher!");
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (voucher_id: string) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a voucher n√†y?")) return;
    try {
      await deleteVoucherByVoucherId(voucher_id);
      toast.success("ƒê√£ x√≥a voucher!");
      fetchVouchers();
    } catch (error) {
      console.error(error);
      toast.error("X√≥a voucher th·∫•t b·∫°i!");
    }
  };

  const formatDate = (date: string) =>
    date ? new Date(date).toLocaleString("vi-VN") : "--";

  const getVoucherStatus = (expiryDate: string) => {
    if (!expiryDate) return "unknown";
    const now = new Date();
    const expiry = new Date(expiryDate);
    const diffTime = expiry.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) return "expired";
    if (diffDays <= 7) return "warning";
    return "active";
  };

  return (
    <div className="voucher-container">
      {/* Header */}
      <div className="voucher-header">
        <h2 className="voucher-title">üé´ Danh s√°ch Voucher</h2>
        <button
          className="add-voucher-btn"
          onClick={() => navigate("/addvouchers")}
        >
          ‚ûï Th√™m Voucher
        </button>
      </div>

      {/* Loading State */}
      {loading ? (
        <div className="loading-container">
          <div className="loading-spinner">‚è≥</div>
          <div className="loading-text">ƒêang t·∫£i d·ªØ li·ªáu...</div>
        </div>
      ) : vouchers.length === 0 ? (
        <div className="empty-container">
          <div className="empty-icon">üé´</div>
          <div className="empty-text">Kh√¥ng c√≥ voucher n√†o</div>
          <div className="empty-subtext">H√£y t·∫°o voucher ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu</div>
        </div>
      ) : (
        <div className="table-container">
          <table className="voucher-table">
            <thead>
              <tr>
                <th>#</th>
                <th>M√£ Voucher</th>
                <th>Lo·∫°i</th>
                <th>Gi·∫£m Gi√°</th>
                <th>L∆∞·ª£t D√πng</th>
                <th>H·∫°n S·ª≠ D·ª•ng</th>
                <th>Tr·∫°ng Th√°i</th>
                <th>Thao T√°c</th>
              </tr>
            </thead>
            <tbody>
              {vouchers.map((voucher, index) => {
                const status = getVoucherStatus(voucher.expiry_date);
                return (
                  <tr key={voucher._id}>
                    <td className="row-number">{index + 1}</td>
                    <td>
                      <span className="voucher-id">
                        {voucher.voucher_id || voucher._id}
                      </span>
                    </td>
                    <td>
                      <span className={`voucher-type ${voucher.User_id ? 'personal' : 'public'}`}>
                        {voucher.User_id ? "C√° nh√¢n" : "D√πng chung"}
                      </span>
                    </td>
                    <td>
                      <span className="discount-value">
                        {voucher.discount_value.toLocaleString()}%
                      </span>
                    </td>
                    <td className="usage-limit">
                      {voucher.usage_limit}
                    </td>
                    <td className="expiry-date">
                      {formatDate(voucher.expiry_date)}
                    </td>
                    <td>
                      <div style={{ display: 'flex', alignItems: 'center' }}>
                        <span className={`status-indicator status-${status}`}></span>
                        <span style={{ 
                          color: status === 'expired' ? '#ef4444' : 
                                 status === 'warning' ? '#f59e0b' : '#10b981',
                          fontSize: '12px',
                          fontWeight: '600'
                        }}>
                          {status === 'expired' ? 'H·∫øt h·∫°n' : 
                           status === 'warning' ? 'S·∫Øp h·∫øt h·∫°n' : 'C√≤n hi·ªáu l·ª±c'}
                        </span>
                      </div>
                    </td>
                    <td>
                      <div className="action-buttons">
                        <button
                          className="action-btn edit"
                          onClick={() =>
                            navigate(`/updatevouchers/${voucher.voucher_id || voucher._id}`)
                          }
                        >
                          ‚úèÔ∏è S·ª≠a
                        </button>
                        <span className="action-separator">|</span>
                        <button
                          className="action-btn delete"
                          onClick={() =>
                            handleDelete(voucher.voucher_id || voucher._id!)
                          }
                        >
                          üóëÔ∏è X√≥a
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default ListVoucher;
