import React, { useState, useEffect } from "react";
import { getVoucherByVoucherId, updateVoucherByVoucherId, VoucherData } from "../../services/voucher";
import { useNavigate, useParams } from "react-router-dom";
import { toast } from "react-toastify";
import "../../css/vouchers/updateVoucher.css";

const EditVoucher = () => {
  const { voucher_id } = useParams<{ voucher_id: string }>();
  const navigate = useNavigate();

  const [discountValue, setDiscountValue] = useState<number>(0);
  const [usageLimit, setUsageLimit] = useState<number>(1);
  const [expiryDate, setExpiryDate] = useState<string>("");
  const [status, setStatus] = useState<string>("active");
  const [loading, setLoading] = useState<boolean>(false);
  const [currentVoucher, setCurrentVoucher] = useState<VoucherData | null>(null);

  useEffect(() => {
    const fetchVoucher = async () => {
      if (!voucher_id) return;
      setLoading(true);
      try {
        const data = await getVoucherByVoucherId(voucher_id);
        if (data.length === 0) {
          toast.error("Kh√¥ng t√¨m th·∫•y voucher");
          navigate("/vouchers");
          return;
        }
        const voucher = data[0]; // l·∫•y voucher ƒë·∫ßu ti√™n
        setCurrentVoucher(voucher);
        setDiscountValue(voucher.discount_value);
        setUsageLimit(voucher.usage_limit);
        setExpiryDate(voucher.expiry_date ? voucher.expiry_date.split("T")[0] : ""); // chuy·ªÉn ISO -> yyyy-mm-dd
        setStatus(voucher.status || "active");
      } catch (error) {
        toast.error("Kh√¥ng t√¨m th·∫•y voucher");
        navigate("/vouchers");
      } finally {
        setLoading(false);
      }
    };
    fetchVoucher();
  }, [voucher_id, navigate]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!discountValue || !usageLimit || !expiryDate) {
      toast.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin");
      return;
    }

    try {
      await updateVoucherByVoucherId(voucher_id!, {
        discount_value: discountValue,
        usage_limit: usageLimit,
        expiry_date: expiryDate,
      });
      toast.success("C·∫≠p nh·∫≠t voucher th√†nh c√¥ng");
      navigate("/vouchers");
    } catch (err) {
      toast.error("C·∫≠p nh·∫≠t voucher th·∫•t b·∫°i");
    }
  };

  if (loading) {
    return (
      <div className="update-voucher-container">
        <div className="loading-container">
          <div className="loading-spinner">‚è≥</div>
          <div className="loading-text">ƒêang t·∫£i d·ªØ li·ªáu voucher...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="update-voucher-container">
      <div className="update-voucher-form-container">
        {/* Header */}
        <div className="update-voucher-header">
          <h2 className="update-voucher-title">‚úèÔ∏è C·∫≠p Nh·∫≠t Voucher</h2>
          <p className="update-voucher-subtitle">
            Ch·ªânh s·ª≠a th√¥ng tin voucher: {currentVoucher?.voucher_id || currentVoucher?._id}
          </p>
        </div>

        {/* Form Body */}
        <div className="update-voucher-form-body">
          <form onSubmit={handleSubmit} className="update-voucher-form">
            {/* M√£ voucher (readonly) */}
            <div className="form-group">
              <label className="form-label">M√£ Voucher</label>
              <div className="current-value">
                üé´ {currentVoucher?.voucher_id || currentVoucher?._id}
              </div>
              <p className="form-help-text">M√£ voucher kh√¥ng th·ªÉ thay ƒë·ªïi</p>
            </div>

            {/* Gi√° tr·ªã gi·∫£m */}
            <div className="form-group">
              <label className="form-label form-label-required">Gi√° Tr·ªã Gi·∫£m (%)</label>
              <input
                type="number"
                className="form-input"
                value={discountValue}
                onChange={(e) => setDiscountValue(Number(e.target.value))}
                min={1}
                max={100}
                required
                placeholder="Nh·∫≠p gi√° tr·ªã gi·∫£m..."
              />
              <p className="form-help-text">Gi√° tr·ªã t·ª´ 1% ƒë·∫øn 100%</p>
            </div>

            {/* S·ªë l∆∞·ª£t s·ª≠ d·ª•ng */}
            <div className="form-group">
              <label className="form-label form-label-required">S·ªë L∆∞·ª£t S·ª≠ D·ª•ng</label>
              <input
                type="number"
                className="form-input"
                value={usageLimit}
                onChange={(e) => setUsageLimit(Number(e.target.value))}
                min={1}
                required
                placeholder="Nh·∫≠p s·ªë l∆∞·ª£t s·ª≠ d·ª•ng..."
              />
              <p className="form-help-text">S·ªë l·∫ßn voucher c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng</p>
            </div>

            {/* Ng√†y h·∫øt h·∫°n */}
            <div className="form-group">
              <label className="form-label form-label-required">Ng√†y H·∫øt H·∫°n</label>
              <input
                type="date"
                className="form-input"
                value={expiryDate}
                onChange={(e) => setExpiryDate(e.target.value)}
                required
                min={new Date().toISOString().split('T')[0]}
              />
              <p className="form-help-text">Ng√†y voucher s·∫Ω h·∫øt hi·ªáu l·ª±c</p>
            </div>

            {/* Tr·∫°ng th√°i */}
            <div className="form-group">
              <label className="form-label">Tr·∫°ng Th√°i</label>
              <select
                value={status}
                onChange={(e) => setStatus(e.target.value)}
                className="form-select"
              >
                <option value="active">üü¢ Ho·∫°t ƒë·ªông</option>
                <option value="inactive">üî¥ Kh√¥ng ho·∫°t ƒë·ªông</option>
                <option value="expired">‚è∞ H·∫øt h·∫°n</option>
              </select>
              <p className="form-help-text">Tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa voucher</p>
            </div>

            {/* Form Actions */}
            <div className="form-actions">
              <button
                type="button"
                className="back-btn"
                onClick={() => navigate("/vouchers")}
              >
                ‚Üê Quay L·∫°i
              </button>
              <button type="submit" className="submit-btn">
                üíæ C·∫≠p Nh·∫≠t Voucher
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default EditVoucher;
