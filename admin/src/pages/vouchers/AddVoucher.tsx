import React, { useEffect, useState } from "react";
import { createVoucher } from "../../services/voucher";
import { getAllUsers } from "../../services/user";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import "../../css/vouchers/addVoucher.css";

interface CreateVoucherPayload {
  discount_value: number;
  usage_limit: number;
  expiry_date: string;
  status?: "active" | "inactive" | "expired";
  voucher_id?: string;
  userIds?: string[];
}

const AddVoucher = () => {
  const navigate = useNavigate();

  const [type, setType] = useState<"all" | "personal">("all");
  const [voucherId, setVoucherId] = useState<string>("");
  const [discountValue, setDiscountValue] = useState<number>(0);
  const [usageLimit, setUsageLimit] = useState<number>(1);
  const [expiryDate, setExpiryDate] = useState<string>("");
  const [users, setUsers] = useState<{ _id: string; name?: string }[]>([]);
  const [loadingUsers, setLoadingUsers] = useState(false);

  const fetchUsers = async () => {
    setLoadingUsers(true);
    try {
      const data = await getAllUsers();
      console.log("Danh s√°ch users t·∫£i v·ªÅ:", data);
      if (Array.isArray(data)) {
        setUsers(data);
      } else {
        setUsers([]);
      }
    } catch (error) {
      console.error("L·ªói khi t·∫£i danh s√°ch user:", error);
      toast.error("Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch ng∆∞·ªùi d√πng");
    } finally {
      setLoadingUsers(false);
    }
  };

  useEffect(() => {
    if (type === "personal") {
      fetchUsers();
    }
  }, [type]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!discountValue || !usageLimit || !expiryDate) {
      toast.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin");
      return;
    }

    const payload: CreateVoucherPayload = {
      discount_value: discountValue,
      usage_limit: usageLimit,
      expiry_date: expiryDate,
      status: "active",
    };

    if (voucherId.trim() !== "") {
      payload.voucher_id = voucherId.trim();
    }

    if (type === "personal") {
      payload.userIds = users.map((u) => u._id);
    }

    console.log("Payload g·ª≠i l√™n API t·∫°o voucher:", payload);

    try {
      await createVoucher(payload);
      toast.success("Th√™m voucher th√†nh c√¥ng");
      navigate("/vouchers");
    } catch (err) {
      console.error("L·ªói khi t·∫°o voucher:", err);
      toast.error("Th√™m voucher th·∫•t b·∫°i");
    }
  };

  return (
    <div className="add-voucher-container">
      <div className="add-voucher-form-container">
        {/* Header */}
        <div className="add-voucher-header">
          <h2 className="add-voucher-title">üé´ Th√™m Voucher M·ªõi</h2>
          <p className="add-voucher-subtitle">T·∫°o voucher ƒë·ªÉ khuy·∫øn m√£i cho kh√°ch h√†ng</p>
        </div>

        {/* Form Body */}
        <div className="add-voucher-form-body">
          <form onSubmit={handleSubmit} className="add-voucher-form">
            {/* Lo·∫°i voucher */}
            <div className="form-group">
              <label className="form-label form-label-required">Lo·∫°i Voucher</label>
              <div className="voucher-type-selector">
                <div 
                  className={`voucher-type-option ${type === 'all' ? 'selected' : ''}`}
                  onClick={() => setType('all')}
                >
                  üåç D√πng Chung
                </div>
                <div 
                  className={`voucher-type-option ${type === 'personal' ? 'selected' : ''}`}
                  onClick={() => setType('personal')}
                >
                  üë§ C√° Nh√¢n
                </div>
              </div>
              <p className="form-help-text">
                {type === 'all' ? 'Voucher c√≥ th·ªÉ s·ª≠ d·ª•ng cho t·∫•t c·∫£ kh√°ch h√†ng' : 'Voucher ch·ªâ d√†nh cho ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªçn'}
              </p>
            </div>

            {/* M√£ voucher (tu·ª≥ ch·ªçn) */}
            <div className="form-group">
              <label className="form-label">M√£ Voucher</label>
              <input
                type="text"
                className="form-input"
                placeholder="VD: VOUCHER2025, SALE50, ..."
                value={voucherId}
                onChange={(e) => setVoucherId(e.target.value)}
              />
              <p className="form-help-text">N·∫øu ƒë·ªÉ tr·ªëng, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông sinh m√£ ng·∫´u nhi√™n</p>
            </div>

            {/* Gi√° tr·ªã gi·∫£m v√† S·ªë l∆∞·ª£t s·ª≠ d·ª•ng */}
            <div className="form-group-row">
              <div className="form-group">
                <label className="form-label form-label-required">Gi√° Tr·ªã Gi·∫£m (%)</label>
                <input
                  type="number"
                  className="form-input"
                  value={discountValue}
                  onChange={(e) => setDiscountValue(Number(e.target.value))}
                  min={1}
                  max={100}
                  required
                  placeholder="10"
                />
              </div>

              <div className="form-group">
                <label className="form-label form-label-required">S·ªë L∆∞·ª£t S·ª≠ D·ª•ng</label>
                <input
                  type="number"
                  className="form-input"
                  value={usageLimit}
                  onChange={(e) => setUsageLimit(Number(e.target.value))}
                  min={1}
                  required
                  placeholder="100"
                />
              </div>
            </div>

            {/* Ng√†y h·∫øt h·∫°n */}
            <div className="form-group">
              <label className="form-label form-label-required">Ng√†y H·∫øt H·∫°n</label>
              <input
                type="date"
                className="form-input"
                value={expiryDate}
                onChange={(e) => setExpiryDate(e.target.value)}
                required
                min={new Date().toISOString().split('T')[0]}
              />
              <p className="form-help-text">Ch·ªçn ng√†y voucher s·∫Ω h·∫øt hi·ªáu l·ª±c</p>
            </div>

            {/* Danh s√°ch ng∆∞·ªùi d√πng (n·∫øu l√† c√° nh√¢n) */}
            {type === "personal" && (
              <div className="form-group">
                <label className="form-label">
                  üë• Ng∆∞·ªùi D√πng √Åp D·ª•ng ({users.length} ng∆∞·ªùi)
                </label>
                <div className="users-list-container">
                  {loadingUsers ? (
                    <div className="loading-users">
                      ‚è≥ ƒêang t·∫£i danh s√°ch ng∆∞·ªùi d√πng...
                    </div>
                  ) : (
                    <ul className="users-list">
                      {users.map((u) => (
                        <li key={u._id}>
                          üë§ {u.name || "Kh√¥ng t√™n"} 
                          <span style={{ color: '#6b7280', fontSize: '11px', marginLeft: '8px' }}>
                            ({u._id.slice(-8)})
                          </span>
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
                <p className="form-help-text">
                  Voucher s·∫Ω ch·ªâ √°p d·ª•ng cho nh·ªØng ng∆∞·ªùi d√πng ƒë∆∞·ª£c li·ªát k√™ ·ªü tr√™n
                </p>
              </div>
            )}

            {/* Submit Button */}
            <button type="submit" className="submit-btn">
              ‚ú® T·∫°o Voucher
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default AddVoucher;
