const mongoose = require('mongoose');
require('dotenv').config();

// K·∫øt n·ªëi MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB'))
  .catch(err => console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err));

const Product = require('./src/models/product');

async function updateProductData() {
  try {
    console.log('üîÑ ƒêang c·∫≠p nh·∫≠t d·ªØ li·ªáu s·∫£n ph·∫©m...\n');

    // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
    const products = await Product.find({ is_deleted: false });
    console.log(`T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m`);

    if (products.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ c·∫≠p nh·∫≠t');
      return;
    }

    // C·∫≠p nh·∫≠t t·ª´ng s·∫£n ph·∫©m v·ªõi d·ªØ li·ªáu kh√°c nhau
    for (let i = 0; i < products.length; i++) {
      const product = products[i];
      
      // T·∫°o d·ªØ li·ªáu kh√°c nhau cho m·ªói s·∫£n ph·∫©m
      const soldQuantity = Math.floor(Math.random() * 1000) + 1; // 1-1000
      const views = Math.floor(Math.random() * 5000) + 1; // 1-5000
      
      // T·∫°o createdAt kh√°c nhau (s·∫£n ph·∫©m m·ªõi nh·∫•t s·∫Ω c√≥ createdAt m·ªõi nh·∫•t)
      const daysAgo = Math.floor(Math.random() * 30); // 0-30 ng√†y tr∆∞·ªõc
      const createdAt = new Date(Date.now() - (daysAgo * 24 * 60 * 60 * 1000));
      
      await Product.findByIdAndUpdate(product._id, {
        sold_quantity: soldQuantity,
        views: views,
        createdAt: createdAt
      });

      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t: ${product.name} - B√°n: ${soldQuantity}, Xem: ${views}, T·∫°o: ${createdAt.toLocaleDateString()}`);
    }

    console.log('\nüéâ Ho√†n th√†nh c·∫≠p nh·∫≠t d·ªØ li·ªáu!');
    
    // Hi·ªÉn th·ªã th·ªëng k√™
    const updatedProducts = await Product.find({ is_deleted: false })
      .sort({ sold_quantity: -1 })
      .limit(5);
    
    console.log('\nüìä Top 5 s·∫£n ph·∫©m b√°n ch·∫°y:');
    updatedProducts.forEach((p, index) => {
      console.log(`${index + 1}. ${p.name} - B√°n: ${p.sold_quantity}, Xem: ${p.views}`);
    });

    const newestProducts = await Product.find({ is_deleted: false })
      .sort({ createdAt: -1 })
      .limit(5);
    
    console.log('\nüìä Top 5 s·∫£n ph·∫©m m·ªõi nh·∫•t:');
    newestProducts.forEach((p, index) => {
      console.log(`${index + 1}. ${p.name} - T·∫°o: ${p.createdAt.toLocaleDateString()}`);
    });

  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu:', error);
  } finally {
    mongoose.connection.close();
  }
}

// Ch·∫°y script
updateProductData(); 