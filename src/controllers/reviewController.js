const Review = require("../models/review");
const mongoose = require("mongoose");
const { ObjectId } = mongoose.Types;

// ‚úÖ H√†m t·∫°o review m·ªõi
exports.createReview = async (req, res) => {
  try {
    const { user_id, product_id, rating, comment } = req.body;

    // Ki·ªÉm tra ID h·ª£p l·ªá
    if (!ObjectId.isValid(user_id) || !ObjectId.isValid(product_id)) {
      return res.status(400).json({ message: "user_id ho·∫∑c product_id kh√¥ng h·ª£p l·ªá" });
    }

    const review = new Review({
      user_id: new ObjectId(user_id),
      product_id: new ObjectId(product_id),
      rating,
      comment,
      create_date: new Date(),
    });

    const savedReview = await review.save();
    res.status(201).json(savedReview);
  } catch (error) {
    console.error("L·ªói khi t·∫°o review:", error);
    res.status(400).json({ message: error.message });
  }
};

// ‚úÖ H√†m l·∫•y danh s√°ch review (c√≥ populate t√™n v√† avatar user)
exports.getReviews = async (req, res) => {
  try {
    const filter = {};

    if (req.query.product_id) {
      const productId = req.query.product_id;

      if (!ObjectId.isValid(productId)) {
        return res.status(400).json({ message: "product_id kh√¥ng h·ª£p l·ªá" });
      }

      filter.product_id = new ObjectId(productId);
    }

    const reviews = await Review.find(filter)
      .sort({ create_date: -1 }) // S·∫Øp x·∫øp m·ªõi nh·∫•t l√™n ƒë·∫ßu
      .populate("user_id", "name avata_url") // üëà CH·ªà l·∫•y name v√† avatar (kh√¥ng l·∫•y password)
      .populate("product_id", "name"); // N·∫øu c·∫ßn t√™n s·∫£n ph·∫©m

    res.status(200).json(reviews);
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch review:", error);
    res.status(500).json({ message: "L·ªói server khi l·∫•y ƒë√°nh gi√°" });
  }
};


// ‚úÖ L·∫•y review theo ID
exports.getReviewById = async (req, res) => {
  try {
    const review = await Review.findById(req.params.id)
      .populate("user_id")
      .populate("product_id");

    if (!review) return res.status(404).json({ message: "Review kh√¥ng t·ªìn t·∫°i" });

    res.status(200).json(review);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// ‚úÖ C·∫≠p nh·∫≠t review
exports.updateReview = async (req, res) => {
  try {
    const { rating, comment } = req.body;

    const review = await Review.findByIdAndUpdate(
      req.params.id,
      {
        rating,
        comment,
        create_date: new Date(),
      },
      { new: true, runValidators: true }
    );

    if (!review) return res.status(404).json({ message: "Review kh√¥ng t·ªìn t·∫°i" });

    res.status(200).json(review);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// ‚úÖ Xo√° review
exports.deleteReview = async (req, res) => {
  try {
    const review = await Review.findByIdAndDelete(req.params.id);

    if (!review) return res.status(404).json({ message: "Review kh√¥ng t·ªìn t·∫°i" });

    res.status(200).json({ message: "Xo√° review th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
