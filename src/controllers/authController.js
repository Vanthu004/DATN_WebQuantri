// src/controllers/authController.js
const User = require("../models/user");
const PasswordResetToken = require('../models/PasswordResetToken');
const EmailVerificationToken = require('../models/EmailVerificationToken');
const nodemailer = require('nodemailer');
const bcrypt = require('bcrypt');

// H√†m t·∫°o transporter email
const createEmailTransporter = () => {
  // Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt
  if (!process.env.EMAIL_USERNAME || !process.env.EMAIL_PASSWORD) {
    throw new Error("EMAIL_USERNAME v√† EMAIL_PASSWORD ph·∫£i ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env");
  }

  return nodemailer.createTransport({
    service: "gmail", // S·ª≠ d·ª•ng service thay v√¨ host/port
    auth: {
      user: process.env.EMAIL_USERNAME,
      pass: process.env.EMAIL_PASSWORD, // Ph·∫£i l√† App Password, kh√¥ng ph·∫£i password th∆∞·ªùng
    },
  });
};

// H√†m g·ª≠i email x√°c nh·∫≠n OTP
const sendVerificationEmail = async (email, otp) => {
  try {
    const transporter = createEmailTransporter();

    const mailOptions = {
      from: `"Swear Support" <${process.env.EMAIL_USERNAME}>`,
      to: email,
      subject: 'M√£ x√°c nh·∫≠n ƒëƒÉng k√Ω t√†i kho·∫£n',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">X√°c nh·∫≠n ƒëƒÉng k√Ω t√†i kho·∫£n</h2>
          <p>Xin ch√†o,</p>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n. Vui l√≤ng nh·∫≠p m√£ OTP b√™n d∆∞·ªõi ƒë·ªÉ x√°c nh·∫≠n email c·ªßa b·∫°n:</p>
          <div style="background-color: #f4f4f4; padding: 20px; text-align: center; margin: 20px 0;">
            <h1 style="color: #007bff; font-size: 32px; margin: 0;">${otp}</h1>
          </div>
          <p><strong>L∆∞u √Ω:</strong> M√£ OTP n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t.</p>
          <p>N·∫øu b·∫°n kh√¥ng ƒëƒÉng k√Ω t√†i kho·∫£n n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
          <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© Swear</p>
        </div>
      `,
    };

    const info = await transporter.sendMail(mailOptions);
    console.log("‚úÖ Email sent successfully:", info.messageId);
    return true;
  } catch (error) {
    console.error("‚ùå L·ªói g·ª≠i email:", error.message);
    
    // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ
    if (error.code === 'EAUTH') {
      console.error("üîê L·ªói x√°c th·ª±c email. Vui l√≤ng ki·ªÉm tra:");
      console.error("   - EMAIL_USERNAME trong file .env");
      console.error("   - EMAIL_PASSWORD ph·∫£i l√† App Password (kh√¥ng ph·∫£i password th∆∞·ªùng)");
      console.error("   - B·∫≠t 2FA cho Gmail v√† t·∫°o App Password");
    } else if (error.code === 'ECONNECTION') {
      console.error("üåê L·ªói k·∫øt n·ªëi email server");
    } else {
      console.error("üìß L·ªói g·ª≠i email kh√°c:", error);
    }
    
    return false;
  }
};

// H√†m g·ª≠i email reset password
const sendPasswordResetEmail = async (email, otp) => {
  try {
    const transporter = createEmailTransporter();

    const mailOptions = {
      from: `"Swear Support" <${process.env.EMAIL_USERNAME}>`,
      to: email,
      subject: 'OTP kh√¥i ph·ª•c m·∫≠t kh·∫©u',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">Kh√¥i ph·ª•c m·∫≠t kh·∫©u</h2>
          <p>Xin ch√†o,</p>
          <p>B·∫°n ƒë√£ y√™u c·∫ßu kh√¥i ph·ª•c m·∫≠t kh·∫©u. M√£ OTP c·ªßa b·∫°n l√†:</p>
          <div style="background-color: #f4f4f4; padding: 20px; text-align: center; margin: 20px 0;">
            <h1 style="color: #007bff; font-size: 32px; margin: 0;">${otp}</h1>
          </div>
          <p><strong>L∆∞u √Ω:</strong> M√£ OTP n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t.</p>
          <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu kh√¥i ph·ª•c m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>
          <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© Swear</p>
        </div>
      `,
    };

    const info = await transporter.sendMail(mailOptions);
    console.log("‚úÖ Password reset email sent successfully:", info.messageId);
    return true;
  } catch (error) {
    console.error("‚ùå L·ªói g·ª≠i email reset password:", error.message);
    
    // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ
    if (error.code === 'EAUTH') {
      console.error("üîê L·ªói x√°c th·ª±c email. Vui l√≤ng ki·ªÉm tra:");
      console.error("   - EMAIL_USERNAME trong file .env");
      console.error("   - EMAIL_PASSWORD ph·∫£i l√† App Password (kh√¥ng ph·∫£i password th∆∞·ªùng)");
      console.error("   - B·∫≠t 2FA cho Gmail v√† t·∫°o App Password");
    } else if (error.code === 'ECONNECTION') {
      console.error("üåê L·ªói k·∫øt n·ªëi email server");
    } else {
      console.error("üìß L·ªói g·ª≠i email kh√°c:", error);
    }
    
    return false;
  }
};

// G·ª≠i l·∫°i email x√°c nh·∫≠n OTP
exports.sendVerificationEmail = async (req, res) => {
  try {
    const { email } = req.body;
    
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: 'Email kh√¥ng t·ªìn t·∫°i' });
    }
    
    if (user.email_verified) {
      return res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n tr∆∞·ªõc ƒë√≥' });
    }

    // T·∫°o OTP 6 s·ªë m·ªõi
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    
    // C·∫≠p nh·∫≠t OTP trong database
    await EmailVerificationToken.deleteMany({ email }); // X√≥a OTP c≈©
    await EmailVerificationToken.create({ email, otp });
    
    // C·∫≠p nh·∫≠t OTP trong user
    await User.findOneAndUpdate(
      { email },
      { 
        email_verification_otp: otp,
        email_verification_expires: new Date(Date.now() + 10 * 60 * 1000)
      }
    );
    
    // G·ª≠i email
    const emailSent = await sendVerificationEmail(email, otp);
    
    if (!emailSent) {
      console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i email x√°c nh·∫≠n");
      return res.status(500).json({ 
        message: 'Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh email server.' 
      });
    }
    
    res.json({ message: 'M√£ x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i l·∫°i v·ªÅ email' });
  } catch (error) {
    console.error('‚ùå L·ªói g·ª≠i email x√°c nh·∫≠n:', error);
    res.status(500).json({ message: 'L·ªói server khi g·ª≠i m√£ x√°c nh·∫≠n' });
  }
};

// X√°c nh·∫≠n email b·∫±ng OTP
exports.verifyEmail = async (req, res) => {
  try {
    const { email, otp } = req.body;
    
    // T√¨m OTP trong database
    const verificationRecord = await EmailVerificationToken.findOne({ email, otp });
    if (!verificationRecord) {
      return res.status(400).json({ message: 'M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
    }
    
    // Ki·ªÉm tra OTP c√≥ h·∫øt h·∫°n ch∆∞a
    if (new Date() > verificationRecord.expireAt) {
      await EmailVerificationToken.deleteMany({ email });
      return res.status(400).json({ message: 'M√£ OTP ƒë√£ h·∫øt h·∫°n' });
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c nh·∫≠n email
    await User.findOneAndUpdate(
      { email },
      { 
        email_verified: true,
        email_verification_otp: null,
        email_verification_expires: null
      }
    );
    
    // X√≥a OTP sau khi s·ª≠ d·ª•ng
    await EmailVerificationToken.deleteMany({ email });
    
    res.json({ message: 'Email ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói x√°c nh·∫≠n email:', error);
    res.status(500).json({ message: 'L·ªói server khi x√°c nh·∫≠n email' });
  }
};

exports.forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;
    
    // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: 'Email kh√¥ng t·ªìn t·∫°i' });
    }

    // T·∫°o OTP 6 s·ªë
    const otp = Math.floor(100000 + Math.random() * 900000).toString();

    // L∆∞u OTP v√†o database
    await PasswordResetToken.create({ email, otp });

    // G·ª≠i email reset password
    const emailSent = await sendPasswordResetEmail(email, otp);
    
    if (!emailSent) {
      console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i email reset password");
      return res.status(500).json({ 
        message: 'Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh email server.' 
      });
    }

    console.log('‚úÖ Email reset password ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn:', email);
    res.json({ message: 'OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ email' });
  } catch (error) {
    console.error('‚ùå L·ªói g·ª≠i email reset password:', error);
    res.status(500).json({ message: 'L·ªói server khi g·ª≠i OTP' });
  }
};

exports.resetPassword = async (req, res) => {
  try {
    const { email, otp, newPassword } = req.body;

    // Ki·ªÉm tra OTP
    const record = await PasswordResetToken.findOne({ email, otp });
    if (!record) {
      return res.status(400).json({ message: 'OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
    }

    // Ki·ªÉm tra OTP c√≥ h·∫øt h·∫°n ch∆∞a
    if (new Date() > record.expireAt) {
      await PasswordResetToken.deleteMany({ email });
      return res.status(400).json({ message: 'OTP ƒë√£ h·∫øt h·∫°n' });
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    
    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
    await User.findOneAndUpdate({ email }, { password: hashedPassword });

    // X√≥a token sau khi s·ª≠ d·ª•ng
    await PasswordResetToken.deleteMany({ email });

    res.json({ message: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói reset password:', error);
    res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u' });
  }
};
